# To run unit tests and new tests on a pull request on dev environment
name: get test list

on:
  pull_request:
    branches: [main]

  # Allows us to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Mark Repository as Safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install project dependencies
        run: npm ci

      - name: Cache Playwright Browsers
        id: cache-browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Install Playwright Browsers
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: List of Playwright Tests to Run
        id: list-tests
        run: |
          # Run the Playwright test list command
          test_list=$(npx playwright test employee-service --list --reporter=list)

          # Debug: Display the raw data
          echo "RAW test_list:"
          echo "$test_list"

          # Filter output to include valid test lines starting with '['
          filtered_list=$(echo "$test_list" | grep -E '^\s*\[' | sed 's/^\s*//; s/\s*$//')

          # Convert the filtered output into a JSON array
          json_array=$(echo "$filtered_list" | jq -R -s 'split("\n") | map(select(length > 0))')

          # Debug: Display the JSON array
          echo "JSON array:"
          echo "$json_array"

          # Save the JSON array to GITHUB_OUTPUT, ensuring proper escaping
          echo "TEST_LIST=$(echo "$json_array" | jq -c)" >> $GITHUB_OUTPUT

      # - name: Use Test List
      #   run: |
      #     echo "Using the test list..."

      #     # Read the JSON array
      #     test_list='${{ steps.list-tests.outputs.TEST_LIST }}'

      #     # Parse and iterate through the array
      #     echo "$test_list" | jq -r '.[]' | while read -r test; do
      #       echo "Processing test: $test"
      #       # Fetch the execution time for the test from state.json
      #       time=$(jq -r --arg test "$test" '.[$test]' state.json)
      #       if [ "$time" != "null" ]; then
      #         echo "Test: $test"
      #         echo "Execution Time: ${time}ms"
      #       else
      #         echo "Test: $test not found in state.json"
      #       fi
      #     done

      - name: Use Test List
        run: |
          echo "Using the test list..."

          # MAX_RUN_TIME in milliseconds (3 minutes)
          MAX_RUN_TIME=1200
          RUNNER_TESTS_TIME=0
          RUNNER_INDEX=0

          echo "Max Run Time (ms): $MAX_RUN_TIME"

          # Read the JSON array
          test_list='${{ steps.list-tests.outputs.TEST_LIST }}'

          # Parse and iterate through the JSON array line by line
          echo "$test_list" | jq -r '.[]' | {
            while IFS= read -r test; do
              # Fetch the execution time for the test from state.json
              time=$(jq -r --arg test "$test" '.[$test]' state.json)
              if [ "$time" != "null" ]; then
                # Add the test time to the current runner's total
                if (( RUNNER_TESTS_TIME + time <= MAX_RUN_TIME )); then
                  RUNNER_TESTS_TIME=$((RUNNER_TESTS_TIME + time))
                  echo "Adding test to runner $RUNNER_INDEX: $test (${time}ms)"
                else
                  # Current runner is full; Add a new runner for the current test
                  RUNNER_INDEX=$((RUNNER_INDEX + 1))
                  RUNNER_TESTS_TIME=$time
                  echo "Adding another runner $RUNNER_INDEX for test: $test (${time}ms)"
                fi
              else
                echo "Test: $test not found in state.json"
              fi
            done

            # Add the last runner if it has tests
            # if (( RUNNER_TESTS_TIME > 0 )); then
            #   RUNNER_INDEX+=($RUNNER_INDEX)
            # fi

            echo "RUNNER_INDEX=$RUNNER_INDEX" >> $GITHUB_ENV
            echo "RUNNER_INDEX=$RUNNER_INDEX" >> $GITHUB_OUTPUT
          }

      - name: Generate JSON Matrix
        id: set-matrix
        run: |
          MATRIX_JSON="["
          for i in $(seq 1 $RUNNER_INDEX); do
            if [ $i -gt 1 ]; then
              MATRIX_JSON+=","
            fi
            MATRIX_JSON+="\"$i\""
          done
          MATRIX_JSON+="]"

          echo "Generated matrix: $MATRIX_JSON"
          echo "dynamic_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
